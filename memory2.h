#ifndef __MEMORY_2__
#define __MEMORY_2__

#include <xc.h>
#include <stdint.h>
#include "mcc_generated_files/memory.h"

/*
 * memory2 extends the functionallity of the memoryrelated 
 * code generated by mcc. The problem memory2 solves is that
 * data-words written in the flash memory are 14-bit wide.
 * Therefore, it is not that easy to store byte oriented data.
 * 
 * memory2 treats words as 12-bit and sees 2 of them as 3 bytes.
 */

#if ERASE_FLASH_BLOCKSIZE != WRITE_FLASH_BLOCKSIZE
#error "Your pic is not supported."
#endif
#define _FLASH_WORD_WIDTH 12

/*
 * How many words you need for all your data to be stored in flash.
 * 
 * This is the only value which should be changed depending on the
 * application needs.
 * 
 * This should not be greater than 128. For most pics the last
 * 128 words in flash-memory are called 'High Endurance Memory'.
 * That means they are meant to let the application store data
 * such as configurations at runtime.
 * 
 * Must be a multiple of ERASE_FLASH_BLOCKSIZE defined in 
 * mcc_generated_files/memory.h .
 */
#define USER_FLASH_SIZE_WORDS 64

#define _USER_FLASH_SIZE ((USER_FLASH_SIZE_WORDS * _FLASH_WORD_WIDTH) / 8)
#define _USER_FLASH_ADDR (END_FLASH - USER_FLASH_SIZE_WORDS)
#define _USER_FLASH_BLOCK_SIZE_WORDS ERASE_FLASH_BLOCKSIZE
/*
 * Workaround. I experienced that the first two words have strange behavior.
 * So I just don't use them.
 */
#define _USER_FLASH_BLOCK_OFFSET 4
/*
 * The size in bytes of the memory window returned by USER_FLASH_Get().
 */
#define USER_FLASH_BLOCK_SIZE (((_USER_FLASH_BLOCK_SIZE_WORDS * _FLASH_WORD_WIDTH) / 8) - _USER_FLASH_BLOCK_OFFSET)
#define USER_FLASH_BLOCK_COUNT (USER_FLASH_SIZE_WORDS / _USER_FLASH_BLOCK_SIZE_WORDS)

#ifndef _USER_FLASH_ADDR
#error "Please define where user flash memory starts"
#elif (_USER_FLASH_ADDR & ((END_FLASH-1) ^ (ERASE_FLASH_BLOCKSIZE-1))) != _USER_FLASH_ADDR
#error "USER_FLASH_ADDR doesn't address a valid block-address"
#endif

/**
 * Gives access to a window in RAM, where USER_FLASH_ReadBlock(...) writes to
 * and USER_FLASH_WriteBlock(...) reads from.
 * @return 
 */
uint8_t* USER_FLASH_Get(void);

/**
 * Reads the 14-bit words in a flash-memory-block, unpacks them and store them
 * at RAM accessible via USER_FLASH_Get().
 * @param index Must be >= 0 and < USER_FLASH_BLOCK_COUNT
 * @return 0: Success -1: Error, probaly index out of bounds
 */
int8_t USER_FLASH_ReadBlock(uint8_t index);

/*
 * Take the bytes contained in RAM at the location returned by USER_FLASH_Get()
 * convert them into the flashs 14-bit words and write them to the flash memory
 * at the given block.
 * 
 * @param index Must be >= 0 and < USER_FLASH_BLOCK_COUNT
 * @return 0: Success -1: Error
 */
int8_t USER_FLASH_WriteBlock(uint8_t index);

#endif